// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.21.12
// source: oss/v4/oss.proto

package v4

import (
	"context"
	nethttp "net/http"

	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOSSGetDownloadURL = "/xmux.core.oss.v4.OSS/GetDownloadURL"

type OSSHTTPServer interface {
	// GetDownloadURL Get a short-lived download URL for a private file
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
}

func RegisterOSSHTTPServer(s *http.Server, srv OSSHTTPServer) {
	r := s.Route("/")
	r.GET("/v4/oss/{biz}/{name}", _OSS_GetDownloadURL0_HTTP_Handler(srv))
}

func _OSS_GetDownloadURL0_HTTP_Handler(srv OSSHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDownloadURLRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOSSGetDownloadURL)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDownloadURLResponse)
		nethttp.Redirect(ctx.Response(), ctx.Request(), reply.Url, nethttp.StatusFound)
		return nil
	}
}

type OSSHTTPClient interface {
	// GetDownloadURL Get a short-lived download URL for a private file
	GetDownloadURL(ctx context.Context, req *GetDownloadURLRequest, opts ...http.CallOption) (rsp *GetDownloadURLResponse, err error)
}

type OSSHTTPClientImpl struct {
	cc *http.Client
}

func NewOSSHTTPClient(client *http.Client) OSSHTTPClient {
	return &OSSHTTPClientImpl{client}
}

// GetDownloadURL Get a short-lived download URL for a private file
func (c *OSSHTTPClientImpl) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...http.CallOption) (*GetDownloadURLResponse, error) {
	var out GetDownloadURLResponse
	pattern := "/v4/oss/{uri}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOSSGetDownloadURL))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
