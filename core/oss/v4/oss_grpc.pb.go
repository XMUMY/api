// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: oss/v4/oss.proto

package v4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OSS_Upload_FullMethodName               = "/xmux.core.oss.v4.OSS/Upload"
	OSS_GetUploadCredentials_FullMethodName = "/xmux.core.oss.v4.OSS/GetUploadCredentials"
	OSS_GetDownloadURL_FullMethodName       = "/xmux.core.oss.v4.OSS/GetDownloadURL"
)

// OSSClient is the client API for OSS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OSS service for client-facing object storage operations
type OSSClient interface {
	// Direct file upload from client for small files or simple flows
	Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error)
	// Get upload credentials for client-direct upload
	GetUploadCredentials(ctx context.Context, in *GetUploadCredentialsRequest, opts ...grpc.CallOption) (*GetUploadCredentialsResponse, error)
	// Get a short-lived download URL for a private file
	GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error)
}

type oSSClient struct {
	cc grpc.ClientConnInterface
}

func NewOSSClient(cc grpc.ClientConnInterface) OSSClient {
	return &oSSClient{cc}
}

func (c *oSSClient) Upload(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResp)
	err := c.cc.Invoke(ctx, OSS_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSClient) GetUploadCredentials(ctx context.Context, in *GetUploadCredentialsRequest, opts ...grpc.CallOption) (*GetUploadCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadCredentialsResponse)
	err := c.cc.Invoke(ctx, OSS_GetUploadCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oSSClient) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDownloadURLResponse)
	err := c.cc.Invoke(ctx, OSS_GetDownloadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OSSServer is the server API for OSS service.
// All implementations must embed UnimplementedOSSServer
// for forward compatibility.
//
// OSS service for client-facing object storage operations
type OSSServer interface {
	// Direct file upload from client for small files or simple flows
	Upload(context.Context, *UploadReq) (*UploadResp, error)
	// Get upload credentials for client-direct upload
	GetUploadCredentials(context.Context, *GetUploadCredentialsRequest) (*GetUploadCredentialsResponse, error)
	// Get a short-lived download URL for a private file
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
	mustEmbedUnimplementedOSSServer()
}

// UnimplementedOSSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOSSServer struct{}

func (UnimplementedOSSServer) Upload(context.Context, *UploadReq) (*UploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedOSSServer) GetUploadCredentials(context.Context, *GetUploadCredentialsRequest) (*GetUploadCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadCredentials not implemented")
}
func (UnimplementedOSSServer) GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedOSSServer) mustEmbedUnimplementedOSSServer() {}
func (UnimplementedOSSServer) testEmbeddedByValue()             {}

// UnsafeOSSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OSSServer will
// result in compilation errors.
type UnsafeOSSServer interface {
	mustEmbedUnimplementedOSSServer()
}

func RegisterOSSServer(s grpc.ServiceRegistrar, srv OSSServer) {
	// If the following call pancis, it indicates UnimplementedOSSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OSS_ServiceDesc, srv)
}

func _OSS_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSS_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServer).Upload(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSS_GetUploadCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServer).GetUploadCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSS_GetUploadCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServer).GetUploadCredentials(ctx, req.(*GetUploadCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OSS_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OSSServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OSS_GetDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OSSServer).GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OSS_ServiceDesc is the grpc.ServiceDesc for OSS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OSS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmux.core.oss.v4.OSS",
	HandlerType: (*OSSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _OSS_Upload_Handler,
		},
		{
			MethodName: "GetUploadCredentials",
			Handler:    _OSS_GetUploadCredentials_Handler,
		},
		{
			MethodName: "GetDownloadURL",
			Handler:    _OSS_GetDownloadURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oss/v4/oss.proto",
}
