// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/aaos/aaos.proto

package aaos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AAOS service

func NewAAOSEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AAOS service

type AAOSService interface {
	GetInfo(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Info, error)
	GetTimetable(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Timetable, error)
	GetCourses(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Courses, error)
	GetExams(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Exams, error)
	GetTranscript(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Transcript, error)
}

type aAOSService struct {
	c    client.Client
	name string
}

func NewAAOSService(name string, c client.Client) AAOSService {
	return &aAOSService{
		c:    c,
		name: name,
	}
}

func (c *aAOSService) GetInfo(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Info, error) {
	req := c.c.NewRequest(c.name, "AAOS.GetInfo", in)
	out := new(Info)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAOSService) GetTimetable(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Timetable, error) {
	req := c.c.NewRequest(c.name, "AAOS.GetTimetable", in)
	out := new(Timetable)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAOSService) GetCourses(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Courses, error) {
	req := c.c.NewRequest(c.name, "AAOS.GetCourses", in)
	out := new(Courses)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAOSService) GetExams(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Exams, error) {
	req := c.c.NewRequest(c.name, "AAOS.GetExams", in)
	out := new(Exams)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aAOSService) GetTranscript(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*Transcript, error) {
	req := c.c.NewRequest(c.name, "AAOS.GetTranscript", in)
	out := new(Transcript)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AAOS service

type AAOSHandler interface {
	GetInfo(context.Context, *empty.Empty, *Info) error
	GetTimetable(context.Context, *empty.Empty, *Timetable) error
	GetCourses(context.Context, *empty.Empty, *Courses) error
	GetExams(context.Context, *empty.Empty, *Exams) error
	GetTranscript(context.Context, *empty.Empty, *Transcript) error
}

func RegisterAAOSHandler(s server.Server, hdlr AAOSHandler, opts ...server.HandlerOption) error {
	type aAOS interface {
		GetInfo(ctx context.Context, in *empty.Empty, out *Info) error
		GetTimetable(ctx context.Context, in *empty.Empty, out *Timetable) error
		GetCourses(ctx context.Context, in *empty.Empty, out *Courses) error
		GetExams(ctx context.Context, in *empty.Empty, out *Exams) error
		GetTranscript(ctx context.Context, in *empty.Empty, out *Transcript) error
	}
	type AAOS struct {
		aAOS
	}
	h := &aAOSHandler{hdlr}
	return s.Handle(s.NewHandler(&AAOS{h}, opts...))
}

type aAOSHandler struct {
	AAOSHandler
}

func (h *aAOSHandler) GetInfo(ctx context.Context, in *empty.Empty, out *Info) error {
	return h.AAOSHandler.GetInfo(ctx, in, out)
}

func (h *aAOSHandler) GetTimetable(ctx context.Context, in *empty.Empty, out *Timetable) error {
	return h.AAOSHandler.GetTimetable(ctx, in, out)
}

func (h *aAOSHandler) GetCourses(ctx context.Context, in *empty.Empty, out *Courses) error {
	return h.AAOSHandler.GetCourses(ctx, in, out)
}

func (h *aAOSHandler) GetExams(ctx context.Context, in *empty.Empty, out *Exams) error {
	return h.AAOSHandler.GetExams(ctx, in, out)
}

func (h *aAOSHandler) GetTranscript(ctx context.Context, in *empty.Empty, out *Transcript) error {
	return h.AAOSHandler.GetTranscript(ctx, in, out)
}
