// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathBridgeGetTimetable = "/v3/ac/timetable"
var PathBridgePing = "/xmux.base.bridge.v3.Bridge/Ping"

// BridgeBMServer is the server API for Bridge service.
type BridgeBMServer interface {
	GetTimetable(ctx context.Context, req *google_protobuf1.Empty) (resp *GetTimetableResp, err error)

	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)
}

var BridgeSvc BridgeBMServer

func bridgeGetTimetable(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BridgeSvc.GetTimetable(c, p)
	c.JSON(resp, err)
}

func bridgePing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := BridgeSvc.Ping(c, p)
	c.JSON(resp, err)
}

// RegisterBridgeBMServer Register the blademaster route
func RegisterBridgeBMServer(e *bm.Engine, server BridgeBMServer) {
	BridgeSvc = server
	e.GET("/v3/ac/timetable", bridgeGetTimetable)
	e.GET("/xmux.base.bridge.v3.Bridge/Ping", bridgePing)
}
