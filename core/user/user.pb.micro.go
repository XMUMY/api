// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	// Login with basic authorization.
	// Will try to register during first login.
	// Returns error if information not adequate to create user.
	Login(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*LoginResp, error)
	// Register and login with provided information.
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*LoginResp, error)
	// GetProfile of specified user.
	GetProfile(ctx context.Context, in *GetProfileReq, opts ...client.CallOption) (*Profile, error)
	// RefreshDevice push key and last seen.
	RefreshDevice(ctx context.Context, in *RefreshDeviceReq, opts ...client.CallOption) (*empty.Empty, error)
	// GetDevices of authenticated user.
	GetDevices(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*GetDevicesResp, error)
	// RevokeDevices will revoke firebase refresh token and delete all devices associated with user.
	RevokeDevices(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "User.Login", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*LoginResp, error) {
	req := c.c.NewRequest(c.name, "User.Register", in)
	out := new(LoginResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetProfile(ctx context.Context, in *GetProfileReq, opts ...client.CallOption) (*Profile, error) {
	req := c.c.NewRequest(c.name, "User.GetProfile", in)
	out := new(Profile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RefreshDevice(ctx context.Context, in *RefreshDeviceReq, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "User.RefreshDevice", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetDevices(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*GetDevicesResp, error) {
	req := c.c.NewRequest(c.name, "User.GetDevices", in)
	out := new(GetDevicesResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RevokeDevices(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "User.RevokeDevices", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// Login with basic authorization.
	// Will try to register during first login.
	// Returns error if information not adequate to create user.
	Login(context.Context, *empty.Empty, *LoginResp) error
	// Register and login with provided information.
	Register(context.Context, *RegisterReq, *LoginResp) error
	// GetProfile of specified user.
	GetProfile(context.Context, *GetProfileReq, *Profile) error
	// RefreshDevice push key and last seen.
	RefreshDevice(context.Context, *RefreshDeviceReq, *empty.Empty) error
	// GetDevices of authenticated user.
	GetDevices(context.Context, *empty.Empty, *GetDevicesResp) error
	// RevokeDevices will revoke firebase refresh token and delete all devices associated with user.
	RevokeDevices(context.Context, *empty.Empty, *empty.Empty) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Login(ctx context.Context, in *empty.Empty, out *LoginResp) error
		Register(ctx context.Context, in *RegisterReq, out *LoginResp) error
		GetProfile(ctx context.Context, in *GetProfileReq, out *Profile) error
		RefreshDevice(ctx context.Context, in *RefreshDeviceReq, out *empty.Empty) error
		GetDevices(ctx context.Context, in *empty.Empty, out *GetDevicesResp) error
		RevokeDevices(ctx context.Context, in *empty.Empty, out *empty.Empty) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Login(ctx context.Context, in *empty.Empty, out *LoginResp) error {
	return h.UserHandler.Login(ctx, in, out)
}

func (h *userHandler) Register(ctx context.Context, in *RegisterReq, out *LoginResp) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *userHandler) GetProfile(ctx context.Context, in *GetProfileReq, out *Profile) error {
	return h.UserHandler.GetProfile(ctx, in, out)
}

func (h *userHandler) RefreshDevice(ctx context.Context, in *RefreshDeviceReq, out *empty.Empty) error {
	return h.UserHandler.RefreshDevice(ctx, in, out)
}

func (h *userHandler) GetDevices(ctx context.Context, in *empty.Empty, out *GetDevicesResp) error {
	return h.UserHandler.GetDevices(ctx, in, out)
}

func (h *userHandler) RevokeDevices(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.UserHandler.RevokeDevices(ctx, in, out)
}
