syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

package xmux.base.user.v3;

option go_package = "api";
option (gogoproto.goproto_getters_all) = false;

service User {
    // Authenticate user with basic uid and password.
    // The uid and password should be basic in metadata/authorization
    rpc AuthUser (.google.protobuf.Empty) returns (AuthedUser);

    // Authenticate user with Firebase JWT.
    // The token should be bearer in metadata/authorization.
    rpc AuthUserWithFirebaseJWT (.google.protobuf.Empty) returns (AuthedUser);

    // Login with basic authorization.
    // Will try to register in first login.
    // Returns error if information not adequate to create user.
    rpc Login (.google.protobuf.Empty) returns (LoginResp) {
        option (google.api.http) = {
            get:"/v3/user/login"
        };
    };

    // Register and login with provided information.
    rpc Register (RegisterReq) returns (LoginResp) {
        option (google.api.http) = {
            post:"/v3/user/login"
        };
    };

    // GetProfile of specified user.
    rpc GetProfile (GetProfileReq) returns (Profile) {
        option (google.api.http) = {
            get:"/v3/user/profile"
        };
    }

    // RefreshDevice push key and last seen.
    rpc RefreshDevice (RefreshDeviceReq) returns (.google.protobuf.Empty) {
        option (google.api.http) = {
            put:"/v3/user/device"
        };
    };

    // GetDevices of authenticated user.
    rpc GetDevices (.google.protobuf.Empty) returns (GetDevicesResp) {
        option (google.api.http) = {
            get:"/v3/user/devices"
        };
    }

    // RevokeDevices will revoke firebase refresh token and delete all devices associated with user.
    rpc RevokeDevices (.google.protobuf.Empty) returns (.google.protobuf.Empty) {
        option (google.api.http) = {
            delete:"/v3/user/devices"
        };
    }

    rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
}

enum UserRole {
    none = 0;
    student = 1;
    teacher = 2;
}

message AuthedUser {
    string uid = 1;
    UserRole role = 2 [(gogoproto.moretags) = 'default:"0"'];
    // Warning: Password may be empty if authenticate using bearer token.
    string password = 3;
}

message RegisterReq {
    string displayName = 1 [(gogoproto.moretags) = 'form:"displayName" validate:"required,max=50"'];
    string email = 2 [(gogoproto.moretags) = 'form:"email" validate:"required,email,max=50"'];
}

message LoginResp {
    // CustomToken that can be used to login Firebase.
    string customToken = 1;
}

message GetProfileReq {
    string uid = 1 [(gogoproto.moretags) = 'form:"uid"'];
}

message Profile {
    string uid = 1;
    string displayName = 2;
    string avatar = 3;
    string name = 4;
}

message RefreshDeviceReq {
    string deviceId = 1 [(gogoproto.moretags) = 'form:"deviceId" validate:"required,max=100"'];
    string deviceModel = 2 [(gogoproto.moretags) = 'form:"deviceModel" validate:"required,max=100"'];
    string deviceName = 3 [(gogoproto.moretags) = 'form:"deviceName" validate:"required,max=100"'];
    string pushChannel = 4 [(gogoproto.moretags) = 'form:"pushChannel" default:"none"'];
    string pushKey = 5 [(gogoproto.moretags) = 'form:"pushKey"'];
}

message GetDevicesResp {
    repeated Device devices = 1;
}

message Device {
    string deviceId = 1;
    string deviceModel = 2;
    string deviceName = 3;
    string lastSeenS = 4;
}
