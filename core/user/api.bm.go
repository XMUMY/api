// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUserAuthUser = "/xmux.base.user.v3.User/AuthUser"
var PathUserAuthUserWithFirebaseJWT = "/xmux.base.user.v3.User/AuthUserWithFirebaseJWT"
var PathUserLogin = "/v3/user/login"
var PathUserRegister = "/v3/user/login"
var PathUserRefreshDevice = "/v3/user/device"
var PathUserGetDevices = "/v3/user/devices"
var PathUserRevokeDevices = "/v3/user/devices"
var PathUserPing = "/xmux.base.user.v3.User/Ping"

// UserBMServer is the server API for User service.
type UserBMServer interface {
	// Authenticate user with basic uid and password.
	// The uid and password should be basic in metadata/authorization
	AuthUser(ctx context.Context, req *google_protobuf1.Empty) (resp *AuthedUser, err error)

	// Authenticate user with Firebase JWT.
	// The token should be bearer in metadata/authorization.
	AuthUserWithFirebaseJWT(ctx context.Context, req *google_protobuf1.Empty) (resp *AuthedUser, err error)

	// Login with basic authorization.
	// Will try to register in first login.
	// Returns error if information not adequate to create user.
	Login(ctx context.Context, req *google_protobuf1.Empty) (resp *LoginResp, err error)

	// Register and login with provided information.
	Register(ctx context.Context, req *RegisterReq) (resp *LoginResp, err error)

	// RefreshDevice push key and last seen.
	RefreshDevice(ctx context.Context, req *RefreshDeviceReq) (resp *google_protobuf1.Empty, err error)

	// GetDevices of authenticated user.
	GetDevices(ctx context.Context, req *google_protobuf1.Empty) (resp *GetDevicesResp, err error)

	// RevokeDevices will revoke firebase refresh token and delete all devices associated with user.
	RevokeDevices(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)
}

var UserSvc UserBMServer

func userAuthUser(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.AuthUser(c, p)
	c.JSON(resp, err)
}

func userAuthUserWithFirebaseJWT(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.AuthUserWithFirebaseJWT(c, p)
	c.JSON(resp, err)
}

func userLogin(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Login(c, p)
	c.JSON(resp, err)
}

func userRegister(c *bm.Context) {
	p := new(RegisterReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Register(c, p)
	c.JSON(resp, err)
}

func userRefreshDevice(c *bm.Context) {
	p := new(RefreshDeviceReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.RefreshDevice(c, p)
	c.JSON(resp, err)
}

func userGetDevices(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.GetDevices(c, p)
	c.JSON(resp, err)
}

func userRevokeDevices(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.RevokeDevices(c, p)
	c.JSON(resp, err)
}

func userPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Ping(c, p)
	c.JSON(resp, err)
}

// RegisterUserBMServer Register the blademaster route
func RegisterUserBMServer(e *bm.Engine, server UserBMServer) {
	UserSvc = server
	e.GET("/xmux.base.user.v3.User/AuthUser", userAuthUser)
	e.GET("/xmux.base.user.v3.User/AuthUserWithFirebaseJWT", userAuthUserWithFirebaseJWT)
	e.GET("/v3/user/login", userLogin)
	e.POST("/v3/user/login", userRegister)
	e.PUT("/v3/user/device", userRefreshDevice)
	e.GET("/v3/user/devices", userGetDevices)
	e.DELETE("/v3/user/devices", userRevokeDevices)
	e.GET("/xmux.base.user.v3.User/Ping", userPing)
}
