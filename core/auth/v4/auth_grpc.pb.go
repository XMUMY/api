// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/auth/v4/auth.proto

package v4

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthInternalClient is the client API for AuthInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthInternalClient interface {
	// Authenticate user with credential.
	AuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserResp, error)
}

type authInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthInternalClient(cc grpc.ClientConnInterface) AuthInternalClient {
	return &authInternalClient{cc}
}

func (c *authInternalClient) AuthUser(ctx context.Context, in *AuthUserReq, opts ...grpc.CallOption) (*AuthUserResp, error) {
	out := new(AuthUserResp)
	err := c.cc.Invoke(ctx, "/xmux.core.auth.v4.AuthInternal/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthInternalServer is the server API for AuthInternal service.
// All implementations must embed UnimplementedAuthInternalServer
// for forward compatibility
type AuthInternalServer interface {
	// Authenticate user with credential.
	AuthUser(context.Context, *AuthUserReq) (*AuthUserResp, error)
	mustEmbedUnimplementedAuthInternalServer()
}

// UnimplementedAuthInternalServer must be embedded to have forward compatible implementations.
type UnimplementedAuthInternalServer struct {
}

func (UnimplementedAuthInternalServer) AuthUser(context.Context, *AuthUserReq) (*AuthUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedAuthInternalServer) mustEmbedUnimplementedAuthInternalServer() {}

// UnsafeAuthInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthInternalServer will
// result in compilation errors.
type UnsafeAuthInternalServer interface {
	mustEmbedUnimplementedAuthInternalServer()
}

func RegisterAuthInternalServer(s grpc.ServiceRegistrar, srv AuthInternalServer) {
	s.RegisterService(&AuthInternal_ServiceDesc, srv)
}

func _AuthInternal_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthInternalServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xmux.core.auth.v4.AuthInternal/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthInternalServer).AuthUser(ctx, req.(*AuthUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthInternal_ServiceDesc is the grpc.ServiceDesc for AuthInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xmux.core.auth.v4.AuthInternal",
	HandlerType: (*AuthInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthUser",
			Handler:    _AuthInternal_AuthUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/auth/v4/auth.proto",
}
